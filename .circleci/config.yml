version: 2.1

###################################################################################################

orbs:
  docker: circleci/docker@0.5.20

###################################################################################################

commands:
  docker-halt-if-no-changes:
    description: Halt a job if there are no changes in the build context of an image
    parameters:
      path:
        type: string
        default: "/"
      stable-branch:
        type: string
        default: "master"
    steps:
      - run:
          name: Halt job if Dockerfile and contents have not changed
          command: |
            output=$(git diff origin/<< parameters.stable-branch >> << parameters.path >>)
            if [ -z "${output}" ]; then
                circleci-agent step halt
            fi

  setup-and-build:
    description: Setup the environment and build KPAL
    parameters:
      target:
        type: string
        default: ""
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-build-cache-{{ checksum "Cargo.lock" }}
            - v1-build-cache-
      - run:
          name: Check code formatting
          command: |
            rustfmt --version
            cargo fmt -- --check
      - run:
          name: Lint code
          command: |
            clippy-driver --version
            cargo clippy --workspace --all-targets -- -D warnings
      - run:
          name: Build all targets
          command: |
            rustc --version --verbose
            cargo --version --verbose
            cargo build --release --workspace --all-targets << parameters.target >>

  save-build-cache:
    description: Save the build cache
    steps:
      - save_cache:
          key: v1-build-cache-{{ checksum "Cargo.lock" }}
          paths:
            - "~/.cargo"
            - "./target"

###################################################################################################

workflows:
  version: 2
  build-kpal:
    jobs:
      - docker/publish:
          name: Build rust-linux-x86_64 image
          image: $CIRCLE_PROJECT_USERNAME/rust-linux-x86_64
          path: resources/docker/rust-linux-x86_64
          tag: $CIRCLE_SHA1,latest
          lint-dockerfile: true
          before_build:
            - docker-halt-if-no-changes:
                path: resources/docker/rust-linux-x86_64
          filters:
            tags:
              only: /.*/

      - docker/publish:
          name: Build rust_cross-armv7-linux-x86_64 image
          image: $CIRCLE_PROJECT_USERNAME/rust_cross_armv7-linux-x86_64
          path: resources/docker/rust_cross_armv7-linux-x86_64
          tag: $CIRCLE_SHA1,latest
          lint-dockerfile: true
          before_build:
            - docker-halt-if-no-changes:
                path: resources/docker/rust_cross_armv7-linux-x86_64
          filters:
            tags:
              only: /.*/

      - docker/publish:
          name: Build kpal_tester-linux-armv7 image
          image: $CIRCLE_PROJECT_USERNAME/kpal_tester-linux-armv7
          path: resources/docker/kpal_tester-linux-armv7
          tag: $CIRCLE_SHA1,latest
          lint-dockerfile: true
          before_build:
            - docker-halt-if-no-changes:
                path: resources/docker/kpal_tester-linux-armv7
            - run:
                name: Register the QEMU multiarch container with the build agent
                command: docker run --rm --privileged multiarch/qemu-user-static:register
          filters:
            tags:
              only: /.*/
              
      - build-x86_64:
          requires:
            - Build rust-linux-x86_64 image
          filters:
            tags:
              only: /.*/

      - build-armv7:
          requires:
            - Build rust_cross-armv7-linux-x86_64 image
            - Build kpal_tester-linux-armv7 image
          filters:
            tags:
              only: /.*/

      - publish-crates-io-dry-run:
          requires:
            - build-x86_64
            - build-armv7
          filters:
            tags:
              only: /.*/

      - publish-github-release:
          requires:
            - build-x86_64
            - build-armv7
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
      - wait-for-approval:
          type: approval
          requires:
            - publish-crates-io-dry-run
            - publish-github-release
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/

      - publish-crates-io:
          requires:
            - wait-for-approval
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/

###################################################################################################

jobs:
  build-x86_64:
    docker:
      - image: kmdouglass/rust-linux-x86_64
    steps:
      - setup-and-build
      - run:
          name: Test all targets
          command: cargo test --release --workspace --all-targets
          environment:
            SERVER_ADDRESS: 0.0.0.0:8080
      - persist_to_workspace:
          root: target
          paths:
            - release/kpald
            - release/libkpal_gpio_cdev.so
            - release/examples/libbasic-plugin.so
      - save-build-cache

  build-armv7:
    docker:
      - image: kmdouglass/rust_cross_armv7-linux-x86_64
    steps:
      - setup-and-build:
          target: --target=armv7-unknown-linux-gnueabihf
      - setup_remote_docker
      # Run the test binaries inside a ARMv7 Docker container. Each time a new test binary is
      # created, we must append it to the list below.
      - run:
          name: Test all targets
          command: |
            docker run --rm --privileged multiarch/qemu-user-static:register
            docker create -v /opt/kpal/target --name kpal-artifacts multiarch/alpine:armhf-v3.10 \
                   /bin/true
            docker cp target kpal-artifacts:/opt/kpal
            docker run --rm --volumes-from kpal-artifacts kmdouglass/kpal_tester-linux-armv7 \
                   -d "${ARTIFACTS_DIR}" \
                   kpal kpal_gpio_cdev kpal_plugin integration_tests
            docker run --rm --volumes-from kpal-artifacts kmdouglass/kpal_tester-linux-armv7 \
                   -d "${ARTIFACTS_DIR}"/../examples \
                   basic_plugin
          environment:
            ARTIFACTS_DIR: /opt/kpal/target/armv7-unknown-linux-gnueabihf/release/deps
      - persist_to_workspace:
          root: target
          paths:
            - armv7-unknown-linux-gnueabihf/release/kpald
            - armv7-unknown-linux-gnueabihf/release/libkpal_gpio_cdev.so
            - armv7-unknown-linux-gnueabihf/release/examples/libbasic-plugin.so
      - save-build-cache

  publish-crates-io-dry-run:
    docker:
      - image: kmdouglass/rust-linux-x86_64
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-build-cache-{{ checksum "Cargo.lock" }}
            - v1-build-cache-
      - run:
          name: Login to crates.io
          command: cargo login ${CRATESIO_TOKEN}
      - run:
          name: Publish kpal-plugin (dry-run)
          command: |
            pushd kpal-plugin
            cargo publish --dry-run
            popd

  publish-github-release:
    docker:
      - image: cibuilds/github
    steps:
      - attach_workspace:
          at: /tmp/target
      - run:
          name: Package x86_64 artifacts
          command: |
            pushd /tmp/target/release
            tar -czvf kpal-linux-x86_64.tar.gz \
                kpald libkpal_gpio_cdev.so examples/libbasic-plugin.so
            popd
      - run:
          name: Package armv7 artifacts
          command: |
            pushd /tmp/target/armv7-unknown-linux-gnueabihf/release
            tar -czvf kpal-linux-armv7.tar.gz \
                kpald libkpal_gpio_cdev.so examples/libbasic-plugin.so
            popd
      - run:
          name: Move artifacts to a common directory
          command: |
            mkdir /tmp/artifacts
            mv /tmp/target/release/kpal-linux-x86_64.tar.gz \
               /tmp/target/armv7-unknown-linux-gnueabihf/release/kpal-linux-armv7.tar.gz \
               /tmp/artifacts
      - run:
          name: Publish artifacts on GitHub
          command: |
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} \
                -c ${CIRCLE_SHA1} ${CIRCLE_TAG} /tmp/artifacts

  publish-crates-io:
    docker:
      - image: kmdouglass/rust-linux-x86_64
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-build-cache-{{ checksum "Cargo.lock" }}
            - v1-build-cache-
      - run:
          name: Login to crates.io
          command: cargo login ${CRATESIO_TOKEN}
      - run:
          name: Publish kpal-plugin
          command: |
            pushd kpal-plugin
            cargo publish
            popd
      - run:
          name: Publish kpal
          command: cargo publish
      - run:
          name: Publish kpal-gpio-cdev
          command: |
            pushd kpal-gpio-cdev
            cargo publish
            popd
    
