//! Routines for initializing the daemon.
pub mod library;
pub mod transmitters;

use std::boxed::Box;
use std::error::Error;
use std::fmt;
use std::net::SocketAddr;
use std::path::PathBuf;
use std::sync::RwLock;

use dirs::home_dir;
use lazy_static::lazy_static;
use structopt::StructOpt;

use crate::constants::{KPAL_DIR, LIBRARY_DIR};
use crate::plugins::TSLibrary;

lazy_static! {
    static ref DEFAULT_LIBRARY_DIR: String = {
        let mut default_dir = PathBuf::new();
        default_dir.push(home_dir().expect("Could not determine user's home directory"));
        default_dir.push(KPAL_DIR);
        default_dir.push(LIBRARY_DIR);
        default_dir.to_string_lossy().to_string()
    };
}

/// The set of command line arguments for the daemon.
#[derive(StructOpt)]
#[structopt(
    name = "kpald",
    about = "A general-purpose control system for physical computing"
)]
pub struct Cli {
    #[structopt(short = "s", long = "server-address", default_value = "0.0.0.0:8000")]
    pub server_addr: SocketAddr,

    #[structopt(
        short = "l",
        long = "library-dir",
        raw(default_value = "&DEFAULT_LIBRARY_DIR"),
        parse(from_os_str)
    )]
    pub library_dir: PathBuf,
}

/// The datatypes generated by the initialization steps.
pub struct Init {
    pub libraries: Vec<TSLibrary>,
    pub transmitters: RwLock<transmitters::Transmitters>,
}

/// Initializes the daemon.
///
/// This method returns the data structures that are required by the daemon to operate, including
/// and a vector of thread-safe libraries that have been loaded into memory and a collection of
/// transmitters for communicating with peripherals.
///
/// # Arguments
///
/// * `args` - The command line arguments that were passed to the daemon at startup.
pub fn init(args: &Cli) -> Result<Init> {
    let libraries =
        library::init(&args.library_dir).map_err(|e| InitError { side: Box::new(e) })?;
    let transmitters = RwLock::new(transmitters::init());

    Ok(Init {
        libraries,
        transmitters,
    })
}

/// A Result that is returned by this module.
pub type Result<T> = std::result::Result<T, InitError>;

/// Raised  when an error occurs during the daemon's initialization.
#[derive(Debug)]
pub struct InitError {
    side: Box<dyn Error>,
}

impl Error for InitError {
    fn description(&self) -> &str {
        "Failed to initialize the daemon"
    }

    fn source(&self) -> Option<&(dyn Error + 'static)> {
        Some(&*self.side)
    }
}

impl fmt::Display for InitError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "InitError {{ Cause: {} }}", &*self.side)
    }
}
